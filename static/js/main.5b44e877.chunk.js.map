{"version":3,"sources":["engine/index.js","index.js"],"names":["createDivisionProblems","b","f","bt","count","parse","v","numberRange","k","push","from","to","filteredRange","filter","n","r","length","randomNumberFromRange","splice","map","range","Math","floor","random","generateQuestions","timeTables","end","selectionRange","select","arr","flat","InputPanel","setQuestions","React","useState","setTimeTables","useRef","totalValuesPerTimeTable","lastValue","timeTable","className","ref","type","onClick","e","i","current","value","focus","JSON","stringify","_","q","App","questions","markup","key","NoQuestionGeneratedBanner","role","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b44e877.chunk.js","sourcesContent":["function createDivisionProblems(b, f, bt, count) {\n    const parse = v => +v\n    b = parse(b)\n    const numberRange = []\n    for (let k = 1; k < f; k++) {\n        if (k % b === 0) {\n            numberRange.push(k)\n        }\n    }\n    debugger;\n    const { from, to } = { from: parse(bt[0]), to: parse(bt[1]) }\n    const filteredRange = numberRange.filter(n => n >= from && n <= to)\n    const r = []\n\n    for (let k = 0; k < filteredRange.length; k++) {\n        let v = randomNumberFromRange(filteredRange, filteredRange.length)\n        if (v) r.push(v)\n    }\n    count = parse(count)\n    return r.splice(0, count).map(n => `${n}/${b}`)\n    function randomNumberFromRange(range, count) {\n        let index = Math.floor(Math.random() * count)\n        return range[index]\n    }\n}\n\nfunction generateQuestions({ timeTables, end, selectionRange, select }) {\n\n    timeTables = timeTables || [3, 5, 6, 7, 8, 9, 12]\n    end = end || 999\n    selectionRange = selectionRange || [50, 999]\n    select = select || 5\n    const arr = []\n    for (let t of timeTables) {\n        let r = createDivisionProblems(t, end, selectionRange, select)\n        if (r) arr.push(r)\n    }\n    const result = arr.flat()\n    return result\n}\n\nexport default generateQuestions\n","import React from \"react\"\nimport { render } from \"react-dom\"\nimport generateQuestions from \"./engine\"\nimport \"./dist/styles.css\"\n\nconst InputPanel = ({ generateQuestions, setQuestions }) => {\n    const [timeTables, setTimeTables] = React.useState([])\n    const from = React.useRef(null)\n    const to = React.useRef(null)\n    const totalValuesPerTimeTable = React.useRef(null)\n    const lastValue = React.useRef(null)\n    const timeTable = React.useRef(null)\n\n    return <div className=\"\">\n        <div className=\"border-red-300 px-5 py-5 rounded-md\">\n            <label className=\"text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\">Time table</label>\n            <input\n                ref={timeTable}\n                type=\"number\" className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" />\n            <button\n                onClick={e => {\n                    const i = timeTables.splice(0)\n                    i.push(timeTable.current.value)\n                    setTimeTables(i)\n                    timeTable.current.value = \"\"\n                    timeTable.current.focus()\n                }}\n                className=\"my-5 shadow bg-purple-500 hover:bg-purple-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\">Add number</button>\n            <span className=\"mx-5 text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\">Provided range:</span>\n            <span className=\"mx-1\"> {JSON.stringify(timeTables)}</span>\n        </div>\n\n        <div>\n            <label className=\"text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\">Last value to generate</label>\n            <input ref={lastValue} type=\"number\" className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" />\n        </div>\n\n        <div className=\"px-5 py-5 border-black\">\n            <label className=\"text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\">Selection range</label>\n            <input ref={from} type=\"number\" className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-1/3 py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" />\n            <span>...</span>\n            <input ref={to} type=\"number\" className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-1/3 py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" />\n        </div>\n\n        <div>\n            <label className=\"text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4\">Total values to select per time table</label>\n            <input\n                ref={totalValuesPerTimeTable}\n                type=\"number\" className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\" />\n        </div>\n        <div>\n            <div className=\"\">\n                <button\n                    onClick={_ => {\n                        const end = lastValue.current.value\n                        const selectionRange = [from.current.value, to.current.value]\n                        const select = totalValuesPerTimeTable.current.value\n\n\n                        const param = {\n                            timeTables, end, selectionRange, select\n                        }\n                        const q = generateQuestions(param)\n                        setQuestions(q)\n                    }}\n                    className=\"my-5 center shadow bg-purple-500 hover:bg-purple-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\">Generate Questions</button>\n            </div>\n        </div>\n    </div>\n}\n\nconst App = () => {\n    const [questions, setQuestions] = React.useState([])\n    const markup = questions.map((q, i) => <div className=\"m-4 flex-col border-2 rounded border-gray-600 px-5 py-5\" key={i}>{q}</div>)\n    return <div className=\"container mx-auto text-black\">\n        <h1 className=\" text-6xl px-10 underline text-yellow-700 text-center\">Generate division questions for year3</h1>\n        <InputPanel generateQuestions={generateQuestions} setQuestions={setQuestions} />\n        {questions.length === 0 && (<NoQuestionGeneratedBanner/>)}\n        {questions.length > 0 && (<div className=\"flex flex-wrap text-justify \">\n            {markup}\n        </div>)}\n    </div>\n}\n\nfunction NoQuestionGeneratedBanner() {\n    return (<div className=\"bg-blue-100 border-t border-b border-blue-500 text-blue-700 px-4 py-3\" role=\"alert\">\n        <p className=\"font-bold\">Informational message</p>\n        <p className=\"text-sm\">No questions generated!</p>\n    </div>)\n}\n\nrender(<App />, document.getElementById(\"app\"))"],"sourceRoot":""}